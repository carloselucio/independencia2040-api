// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id               Int    @id @default(autoincrement())
  first_name       String @db.VarChar(40)
  paternal_surname String @db.VarChar(20)
  maternal_surname String @db.VarChar(20)
  email            String @unique @db.VarChar(40)
  password         String @unique @db.VarChar(40)

  beneficiary Beneficiary[]
}

model Person {
  id               Int      @id @default(autoincrement())
  first_name       String   @db.VarChar(40)
  paternal_surname String   @db.VarChar(20)
  maternal_surname String   @db.VarChar(20)
  full_name        String   @db.VarChar(80)
  gender           String   @db.VarChar(10)
  birth_date       DateTime
  phone_number     String   @db.VarChar(16)
  person_2040      String   @db.VarChar(6)
  has_photo        Boolean
  religion         String   @db.VarChar(30)
  health_insurance String   @db.VarChar(16)
  civil_status     String   @db.VarChar(16)
  status           String   @db.VarChar(16)

  beneficiary  Beneficiary?
  familiar     Familiar?
  spirituality Spirituality[]
}

model Beneficiary {
  id                      Int       @id @default(autoincrement())
  person_id               Int       @unique
  person                  Person    @relation(fields: [person_id], references: [id], onDelete: Cascade)
  location                Location?
  family                  Family?
  health                  Health?
  responsible_id          Int?
  responsible             User?     @relation(fields: [responsible_id], references: [id], onDelete: SetNull)
  curp                    String?   @db.VarChar(20)
  is_tentative_birth_date Boolean
  how_found_out           String    @db.VarChar(30)

  relatives Familiar[]
}

model Familiar {
  id             Int         @id @default(autoincrement())
  person_id      Int         @unique
  person         Person      @relation(fields: [person_id], references: [id], onDelete: Cascade)
  beneficiary_id Int
  beneficiary    Beneficiary @relation(fields: [beneficiary_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  education      Education?
  job            Job?
  relationship   String      @db.VarChar(20)
}

model Education {
  id                Int     @id @default(autoincrement())
  school_level      String  @db.VarChar(20)
  last_school_grade String  @db.VarChar(40)
  is_studying       Boolean
  career            String  @db.VarChar(40)

  familiar_id Int      @unique
  familiar    Familiar @relation(fields: [familiar_id], references: [id], onDelete: Cascade)
}

model Job {
  id                   Int     @id @default(autoincrement())
  name                 String  @db.VarChar(30)
  occupation           String  @db.VarChar(30)
  has_health_insurance Boolean
  position             String  @db.VarChar(30)
  salary               Float?

  familiar_id Int      @unique
  familiar    Familiar @relation(fields: [familiar_id], references: [id], onDelete: Cascade)
}

model Family {
  id                          Int     @id @default(autoincrement())
  parents_civil_status        String  @db.VarChar(16)
  house_type                  String  @db.VarChar(30)
  number_of_siblings          Int
  civil_registration          Boolean
  has_birth_certificate_photo Boolean

  beneficiary_id Int         @unique
  beneficiary    Beneficiary @relation(fields: [beneficiary_id], references: [id], onDelete: Cascade)
}

model Health {
  id                         Int         @id @default(autoincrement())
  birth_hospital             String      @db.VarChar(50)
  birth_weight               Float?
  birth_height               Float?
  has_vaccination_card_photo Boolean
  beneficiary_id             Int         @unique
  beneficiary                Beneficiary @relation(fields: [beneficiary_id], references: [id], onDelete: Cascade)

  vaccines Vaccine[]
}

model Location {
  id              Int     @id @default(autoincrement())
  state           String  @db.VarChar(30)
  municipality    String  @db.VarChar(30)
  locality        String  @db.VarChar(30)
  neighborhood    String  @db.VarChar(30)
  street          String? @db.VarChar(30)
  outdoor_number  String? @db.VarChar(8)
  interior_number String? @db.VarChar(8)
  zip_code        String? @db.VarChar(8)

  beneficiary_id Int         @unique
  beneficiary    Beneficiary @relation(fields: [beneficiary_id], references: [id], onDelete: Cascade)
}

model Vaccine {
  id          Int       @id @default(autoincrement())
  health_id   Int
  health      Health    @relation(fields: [health_id], references: [id], onDelete: Cascade)
  name        String    @db.VarChar(30)
  was_applied Boolean
  date        DateTime?
}

model Spirituality {
  id        Int    @id @default(autoincrement())
  person_id Int
  person    Person @relation(fields: [person_id], references: [id], onDelete: Cascade)
  field     String @db.VarChar(20)
}
