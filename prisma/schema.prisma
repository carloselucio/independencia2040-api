// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Person {
  id               Int             @id @default(autoincrement())
  first_name       String          @db.VarChar(40)
  paternal_surname String          @db.VarChar(20)
  maternal_surname String          @db.VarChar(20)
  gender           Gender
  birth_date       DateTime
  phone_number     String          @db.VarChar(16)
  person_2040      Person2040
  has_photo        Boolean
  religion         Religion
  health_insurance HealthInsurance
  civil_status     CivilStatus
  status           Status

  Beneficiary  Beneficiary[]
  Familiar     Familiar[]
  Spirituality Spirituality[]
}

model User {
  id               Int    @id @default(autoincrement())
  first_name       String @db.VarChar(40)
  paternal_surname String @db.VarChar(20)
  maternal_surname String @db.VarChar(20)
  email            String @unique @db.VarChar(40)
  password         String @unique @db.VarChar(40)

  Post        Post[]
  Beneficiary Beneficiary[]
}

model Job {
  id                   Int      @id @default(autoincrement())
  name                 String   @db.VarChar(30)
  occupation           String   @db.VarChar(30)
  has_health_insurance Boolean
  position             Position
  salary               Int

  Familiar Familiar[]
}

model Education {
  id                Int         @id @default(autoincrement())
  school_level      SchoolLevel
  last_school_grade String      @db.VarChar(40)
  is_studying       Boolean
  career            String      @db.VarChar(100)

  Familiar Familiar[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Family {
  id                          Int                @id @default(autoincrement())
  parents_civil_status        ParentsCivilStatus
  house_type                  HouseType
  number_of_siblings          Int
  civil_registration          Boolean
  has_birth_certificate_photo Boolean

  Beneficiary Beneficiary[]
}

model Health {
  id                         Int     @id @default(autoincrement())
  birth_hospital             String  @db.VarChar(100)
  birth_weight               Int
  birth_height               Int
  has_vaccination_card_photo Boolean

  vaccines    Vaccine[]
  Beneficiary Beneficiary[]
}

model Location {
  id              Int    @id @default(autoincrement())
  state           String @db.VarChar(30)
  municipality    String @db.VarChar(30)
  locality        String @db.VarChar(30)
  neighborhood    String @db.VarChar(30)
  street          String @db.VarChar(30)
  outdoor_number  String @db.VarChar(8)
  interior_number String @db.VarChar(8)
  zip_code        String @db.VarChar(8)

  Beneficiary Beneficiary[]
}

model Vaccine {
  id          Int      @id @default(autoincrement())
  health_id   Int
  health      Health   @relation(fields: [health_id], references: [id], onDelete: Cascade)
  name        String   @db.VarChar(50)
  was_applied Boolean
  date        DateTime
}

model Beneficiary {
  id                      Int         @id @default(autoincrement())
  person_id               Int
  person                  Person      @relation(fields: [person_id], references: [id], onDelete: Cascade)
  location_id             Int
  location                Location    @relation(fields: [location_id], references: [id], onDelete: Cascade)
  family_id               Int
  family                  Family      @relation(fields: [family_id], references: [id], onDelete: Cascade)
  health_id               Int
  health                  Health      @relation(fields: [health_id], references: [id], onDelete: Cascade)
  responsible_id          Int
  responsible             User        @relation(fields: [responsible_id], references: [id], onDelete: Cascade)
  curp                    String      @db.VarChar(20)
  is_tentative_birth_date Boolean
  how_found_out           HowFoundOut

  Familiar Familiar[]
}

model Familiar {
  id             Int          @id @default(autoincrement())
  person_id      Int
  person         Person       @relation(fields: [person_id], references: [id], onDelete: Cascade)
  beneficiary_id Int
  beneficiary    Beneficiary  @relation(fields: [beneficiary_id], references: [id], onDelete: Cascade)
  education_id   Int
  education      Education    @relation(fields: [education_id], references: [id], onDelete: Cascade)
  job_id         Int
  job            Job          @relation(fields: [job_id], references: [id], onDelete: Cascade)
  relationship   Relationship
}

model Spirituality {
  id        Int    @id @default(autoincrement())
  person_id Int
  person    Person @relation(fields: [person_id], references: [id], onDelete: Cascade)
  field     Field
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Person2040 {
  P2040
  R2040
  F2040
  C2040
}

enum Religion {
  Bautista
  Catolico
  Cristiano
  EvangelicaPentecostes
  Mormon
  Ninguna
}

enum HealthInsurance {
  IMMS
  ISSSTE
  INSABI
  Magisterio
  SeguroPrivado
  NoTiene
}

enum CivilStatus {
  Casados
  Divorciados
  MadreSoltera
  PadreSoltero
  Separados
  Soltero
  UnionLibre
  Viudo
}

enum Status {
  Activo
  Inactivo
  PorContactar
  Fallecido
}

enum Position {
  Empleado
  Empleador
  TrabajadorPorCuentaPropia
  TrabajadorSinSalarioFijo
}

enum SchoolLevel {
  Primaria
  Secundaria
  Preparatoria
  Tecnica
  Profesional
}

enum ParentsCivilStatus {
  Casados
  Divorciados
  MadreSoltera
  PadreSoltero
  Separados
  Soltero
  UnionLibre
  Viudo
}

enum HouseType {
  Propia
  Prestada
  Renta
  CohabitadaPadre
  CohabitadaMadre
}

enum HowFoundOut {
  BocaEnBoca
  ElPlanMeBusco
  RecomendacionConocido
}

enum Relationship {
  a
  b
}

enum Field {
  Bautizo
  Comunion
  Confirmacion
  Matrimonio
  Entronizacion
}
